
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.mock_impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractMockDatabaseModel;
import com.rapleaf.jack.ModelWithId;

import javadb.timely.database_1.models.Event;
import javadb.timely.database_1.iface.IEventPersistence;

import javadb.timely.IDatabases;

public class BaseMockEventPersistenceImpl extends AbstractMockDatabaseModel<Event> implements IEventPersistence {
  private final IDatabases databases;

  private static AtomicInteger curId = new AtomicInteger(1);

  public BaseMockEventPersistenceImpl(IDatabases databases) {
    super();
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    Integer subject_id = (Integer) fieldsMap.get(Event._Fields.subject_id);
    Integer owner_id = (Integer) fieldsMap.get(Event._Fields.owner_id);
    String owner_type = (String) fieldsMap.get(Event._Fields.owner_type);
    Boolean is_private = (Boolean) fieldsMap.get(Event._Fields.is_private);
    Integer override_id = (Integer) fieldsMap.get(Event._Fields.override_id);
    Integer parent_id = (Integer) fieldsMap.get(Event._Fields.parent_id);
    Long start = (Long) fieldsMap.get(Event._Fields.start);
    Long end = (Long) fieldsMap.get(Event._Fields.end);
    String name = (String) fieldsMap.get(Event._Fields.name);
    Long created_at = (Long) fieldsMap.get(Event._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Event._Fields.updated_at);
    return create(subject_id, owner_id, owner_type, is_private, override_id, parent_id, start, end, name, created_at, updated_at);
  }


  public Event create(final Integer subject_id, final Integer owner_id, final String owner_type, final Boolean is_private, final Integer override_id, final Integer parent_id, final Long start, final Long end, final String name, final Long created_at, final Long updated_at) throws IOException {
    long __id = curId.getAndIncrement();
    Event newInst = new Event(__id, subject_id, owner_id, owner_type, is_private, override_id, parent_id, start, end, name, created_at, updated_at, databases);
    records.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public Set<Event> find(Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(fieldsMap);
  }

  public Set<Event> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(ids, fieldsMap);
  }

  public Set<Event> findBySubjectId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.subject_id, value);}});
  }

  public Set<Event> findByOwnerId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.owner_id, value);}});
  }

  public Set<Event> findByOwnerType(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.owner_type, value);}});
  }

  public Set<Event> findByIsPrivate(final Boolean value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.is_private, value);}});
  }

  public Set<Event> findByOverrideId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.override_id, value);}});
  }

  public Set<Event> findByParentId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.parent_id, value);}});
  }

  public Set<Event> findByStart(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.start, value);}});
  }

  public Set<Event> findByEnd(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.end, value);}});
  }

  public Set<Event> findByName(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.name, value);}});
  }

  public Set<Event> findByCreatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.created_at, value);}});
  }

  public Set<Event> findByUpdatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.updated_at, value);}});
  }
}
