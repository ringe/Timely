
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.mock_impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractMockDatabaseModel;
import com.rapleaf.jack.ModelWithId;

import javadb.timely.database_1.models.TermSetting;
import javadb.timely.database_1.iface.ITermSettingPersistence;

import javadb.timely.IDatabases;

public class BaseMockTermSettingPersistenceImpl extends AbstractMockDatabaseModel<TermSetting> implements ITermSettingPersistence {
  private final IDatabases databases;

  private static AtomicInteger curId = new AtomicInteger(1);

  public BaseMockTermSettingPersistenceImpl(IDatabases databases) {
    super();
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    Integer term_id = (Integer) fieldsMap.get(TermSetting._Fields.term_id);
    String name = (String) fieldsMap.get(TermSetting._Fields.name);
    String value = (String) fieldsMap.get(TermSetting._Fields.value);
    Long created_at = (Long) fieldsMap.get(TermSetting._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(TermSetting._Fields.updated_at);
    return create(term_id, name, value, created_at, updated_at);
  }


  public TermSetting create(final Integer term_id, final String name, final String value, final Long created_at, final Long updated_at) throws IOException {
    long __id = curId.getAndIncrement();
    TermSetting newInst = new TermSetting(__id, term_id, name, value, created_at, updated_at, databases);
    records.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public Set<TermSetting> find(Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(fieldsMap);
  }

  public Set<TermSetting> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(ids, fieldsMap);
  }

  public Set<TermSetting> findByTermId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(TermSetting._Fields.term_id, value);}});
  }

  public Set<TermSetting> findByName(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(TermSetting._Fields.name, value);}});
  }

  public Set<TermSetting> findByValue(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(TermSetting._Fields.value, value);}});
  }

  public Set<TermSetting> findByCreatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(TermSetting._Fields.created_at, value);}});
  }

  public Set<TermSetting> findByUpdatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(TermSetting._Fields.updated_at, value);}});
  }
}
