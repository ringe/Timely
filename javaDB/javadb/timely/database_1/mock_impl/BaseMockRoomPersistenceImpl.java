
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.mock_impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractMockDatabaseModel;
import com.rapleaf.jack.ModelWithId;

import javadb.timely.database_1.models.Room;
import javadb.timely.database_1.iface.IRoomPersistence;

import javadb.timely.IDatabases;

public class BaseMockRoomPersistenceImpl extends AbstractMockDatabaseModel<Room> implements IRoomPersistence {
  private final IDatabases databases;

  private static AtomicInteger curId = new AtomicInteger(1);

  public BaseMockRoomPersistenceImpl(IDatabases databases) {
    super();
    this.databases = databases;
  }


  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    String code = (String) fieldsMap.get(Room._Fields.code);
    String category = (String) fieldsMap.get(Room._Fields.category);
    Integer capacity = (Integer) fieldsMap.get(Room._Fields.capacity);
    Integer capacity_exam = (Integer) fieldsMap.get(Room._Fields.capacity_exam);
    String description = (String) fieldsMap.get(Room._Fields.description);
    Long created_at = (Long) fieldsMap.get(Room._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Room._Fields.updated_at);
    return create(code, category, capacity, capacity_exam, description, created_at, updated_at);
  }


  public Room create(final String code, final String category, final Integer capacity, final Integer capacity_exam, final String description, final Long created_at, final Long updated_at) throws IOException {
    long __id = curId.getAndIncrement();
    Room newInst = new Room(__id, code, category, capacity, capacity_exam, description, created_at, updated_at, databases);
    records.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public Set<Room> find(Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(fieldsMap);
  }

  public Set<Room> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(ids, fieldsMap);
  }

  public Set<Room> findByCode(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.code, value);}});
  }

  public Set<Room> findByCategory(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.category, value);}});
  }

  public Set<Room> findByCapacity(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.capacity, value);}});
  }

  public Set<Room> findByCapacityExam(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.capacity_exam, value);}});
  }

  public Set<Room> findByDescription(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.description, value);}});
  }

  public Set<Room> findByCreatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.created_at, value);}});
  }

  public Set<Room> findByUpdatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Room._Fields.updated_at, value);}});
  }
}
