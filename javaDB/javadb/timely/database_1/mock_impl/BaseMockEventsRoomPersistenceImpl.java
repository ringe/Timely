
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.mock_impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractMockDatabaseModel;
import com.rapleaf.jack.ModelWithId;

import javadb.timely.database_1.models.EventsRoom;
import javadb.timely.database_1.iface.IEventsRoomPersistence;

import javadb.timely.IDatabases;

public class BaseMockEventsRoomPersistenceImpl extends AbstractMockDatabaseModel<EventsRoom> implements IEventsRoomPersistence {
  private final IDatabases databases;

  private static AtomicInteger curId = new AtomicInteger(1);

  public BaseMockEventsRoomPersistenceImpl(IDatabases databases) {
    super();
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    int event_id = (Integer) fieldsMap.get(EventsRoom._Fields.event_id);
    int room_id = (Integer) fieldsMap.get(EventsRoom._Fields.room_id);
    return create(event_id, room_id);
  }


  public EventsRoom create(final int event_id, final int room_id) throws IOException {
    long __id = curId.getAndIncrement();
    EventsRoom newInst = new EventsRoom(__id, event_id, room_id, databases);
    records.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public Set<EventsRoom> find(Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(fieldsMap);
  }

  public Set<EventsRoom> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(ids, fieldsMap);
  }

  public Set<EventsRoom> findByEventId(final int value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(EventsRoom._Fields.event_id, value);}});
  }

  public Set<EventsRoom> findByRoomId(final int value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(EventsRoom._Fields.room_id, value);}});
  }
}
