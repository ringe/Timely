
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.ModelWithId;

import javadb.timely.database_1.models.Event;
import javadb.timely.database_1.iface.IEventPersistence;

import javadb.timely.IDatabases;

public class BaseEventPersistenceImpl extends AbstractDatabaseModel<Event> implements IEventPersistence {
  private final IDatabases databases;

  public BaseEventPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "events", Arrays.asList("subject_id", "owner_id", "owner_type", "is_private", "override_id", "parent_id", "start", "end", "name", "created_at", "updated_at"));
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    Integer subject_id = (Integer) fieldsMap.get(Event._Fields.subject_id);
    Integer owner_id = (Integer) fieldsMap.get(Event._Fields.owner_id);
    String owner_type = (String) fieldsMap.get(Event._Fields.owner_type);
    Boolean is_private = (Boolean) fieldsMap.get(Event._Fields.is_private);
    Integer override_id = (Integer) fieldsMap.get(Event._Fields.override_id);
    Integer parent_id = (Integer) fieldsMap.get(Event._Fields.parent_id);
    Long start = (Long) fieldsMap.get(Event._Fields.start);
    Long end = (Long) fieldsMap.get(Event._Fields.end);
    String name = (String) fieldsMap.get(Event._Fields.name);
    Long created_at = (Long) fieldsMap.get(Event._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Event._Fields.updated_at);
    return create(subject_id, owner_id, owner_type, is_private, override_id, parent_id, start, end, name, created_at, updated_at);
  }


  public Event create(final Integer subject_id, final Integer owner_id, final String owner_type, final Boolean is_private, final Integer override_id, final Integer parent_id, final Long start, final Long end, final String name, final Long created_at, final Long updated_at) throws IOException {
    long __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
        if (subject_id == null) {
          stmt.setNull(1, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(1, subject_id);
        }
        if (owner_id == null) {
          stmt.setNull(2, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(2, owner_id);
        }
        if (owner_type == null) {
          stmt.setNull(3, java.sql.Types.CHAR);
        } else {
          stmt.setString(3, owner_type);
        }
        if (is_private == null) {
          stmt.setNull(4, java.sql.Types.BOOLEAN);
        } else {
          stmt.setBoolean(4, is_private);
        }
        if (override_id == null) {
          stmt.setNull(5, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(5, override_id);
        }
        if (parent_id == null) {
          stmt.setNull(6, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(6, parent_id);
        }
        if (start == null) {
          stmt.setNull(7, java.sql.Types.DATE);
        } else {
          stmt.setTimestamp(7, new Timestamp(start));
        }
        if (end == null) {
          stmt.setNull(8, java.sql.Types.DATE);
        } else {
          stmt.setTimestamp(8, new Timestamp(end));
        }
        if (name == null) {
          stmt.setNull(9, java.sql.Types.CHAR);
        } else {
          stmt.setString(9, name);
        }
        if (created_at == null) {
          stmt.setNull(10, java.sql.Types.DATE);
        } else {
          stmt.setTimestamp(10, new Timestamp(created_at));
        }
        if (updated_at == null) {
          stmt.setNull(11, java.sql.Types.DATE);
        } else {
          stmt.setTimestamp(11, new Timestamp(updated_at));
        }
      }
    }, getInsertStatement(Arrays.asList("subject_id", "owner_id", "owner_type", "is_private", "override_id", "parent_id", "start", "end", "name", "created_at", "updated_at")));
    Event newInst = new Event(__id, subject_id, owner_id, owner_type, is_private, override_id, parent_id, start, end, name, created_at, updated_at, databases);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public Set<Event> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public Set<Event> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    Set<Event> foundSet = new HashSet<Event>();
    
    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundSet;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM events WHERE (");
    List<Object> nonNullValues = new ArrayList<Object>();
    List<Event._Fields> nonNullValueFields = new ArrayList<Event._Fields>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();
      
      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((Event._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field + queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND " + getIdSetCondition(ids));
    statementString.append(")");

    PreparedStatement preparedStatement = getPreparedStatement(statementString.toString());

    for (int i = 0; i < nonNullValues.size(); i++) {
      Event._Fields field = nonNullValueFields.get(i);
      try {
        switch (field) {
          case subject_id:
            preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
            break;
          case owner_id:
            preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
            break;
          case owner_type:
            preparedStatement.setString(i+1, (String) nonNullValues.get(i));
            break;
          case is_private:
            preparedStatement.setBoolean(i+1, (Boolean) nonNullValues.get(i));
            break;
          case override_id:
            preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
            break;
          case parent_id:
            preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
            break;
          case start:
            preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
            break;
          case end:
            preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
            break;
          case name:
            preparedStatement.setString(i+1, (String) nonNullValues.get(i));
            break;
          case created_at:
            preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
            break;
          case updated_at:
            preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
            break;
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
    executeQuery(foundSet, preparedStatement);

    return foundSet;
  }

  @Override
  protected void setAttrs(Event model, PreparedStatement stmt) throws SQLException {
    if (model.getSubjectId() == null) {
      stmt.setNull(1, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(1, model.getSubjectId());
    }
    if (model.getOwnerId() == null) {
      stmt.setNull(2, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(2, model.getOwnerId());
    }
    if (model.getOwnerType() == null) {
      stmt.setNull(3, java.sql.Types.CHAR);
    } else {
      stmt.setString(3, model.getOwnerType());
    }
    if (model.isIsPrivate() == null) {
      stmt.setNull(4, java.sql.Types.BOOLEAN);
    } else {
      stmt.setBoolean(4, model.isIsPrivate());
    }
    if (model.getOverrideId() == null) {
      stmt.setNull(5, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(5, model.getOverrideId());
    }
    if (model.getParentId() == null) {
      stmt.setNull(6, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(6, model.getParentId());
    }
    if (model.getStart() == null) {
      stmt.setNull(7, java.sql.Types.DATE);
    } else {
      stmt.setTimestamp(7, new Timestamp(model.getStart()));
    }
    if (model.getEnd() == null) {
      stmt.setNull(8, java.sql.Types.DATE);
    } else {
      stmt.setTimestamp(8, new Timestamp(model.getEnd()));
    }
    if (model.getName() == null) {
      stmt.setNull(9, java.sql.Types.CHAR);
    } else {
      stmt.setString(9, model.getName());
    }
    if (model.getCreatedAt() == null) {
      stmt.setNull(10, java.sql.Types.DATE);
    } else {
      stmt.setTimestamp(10, new Timestamp(model.getCreatedAt()));
    }
    if (model.getUpdatedAt() == null) {
      stmt.setNull(11, java.sql.Types.DATE);
    } else {
      stmt.setTimestamp(11, new Timestamp(model.getUpdatedAt()));
    }
    stmt.setLong(12, model.getId());
  }

  @Override
  protected Event instanceFromResultSet(ResultSet rs) throws SQLException {
    return new Event(rs.getLong("id"),
      getIntOrNull(rs, "subject_id"),
      getIntOrNull(rs, "owner_id"),
      rs.getString("owner_type"),
      getBooleanOrNull(rs, "is_private"),
      getIntOrNull(rs, "override_id"),
      getIntOrNull(rs, "parent_id"),
      getDateAsLong(rs, "start"),
      getDateAsLong(rs, "end"),
      rs.getString("name"),
      getDateAsLong(rs, "created_at"),
      getDateAsLong(rs, "updated_at"),
      databases
    );
  }

  public Set<Event> findBySubjectId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.subject_id, value);}});
  }

  public Set<Event> findByOwnerId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.owner_id, value);}});
  }

  public Set<Event> findByOwnerType(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.owner_type, value);}});
  }

  public Set<Event> findByIsPrivate(final Boolean value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.is_private, value);}});
  }

  public Set<Event> findByOverrideId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.override_id, value);}});
  }

  public Set<Event> findByParentId(final Integer value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.parent_id, value);}});
  }

  public Set<Event> findByStart(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.start, value);}});
  }

  public Set<Event> findByEnd(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.end, value);}});
  }

  public Set<Event> findByName(final String value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.name, value);}});
  }

  public Set<Event> findByCreatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.created_at, value);}});
  }

  public Set<Event> findByUpdatedAt(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(Event._Fields.updated_at, value);}});
  }
}
