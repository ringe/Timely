
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.models;

import java.io.IOException;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import javadb.timely.database_1.IDatabase1;

import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;

import javadb.timely.IDatabases;

public class Accessory extends ModelWithId {
  // Fields
  private Integer __room_id;
  private String __name;
  private String __value;
  private Long __created_at;
  private Long __updated_at;

  // Associations
  private BelongsToAssociation<Room> __assoc_room;

  public enum _Fields {
    room_id,
    name,
    value,
    created_at,
    updated_at,
  }

  public Accessory(long id, final Integer room_id, final String name, final String value, final Long created_at, final Long updated_at, IDatabases databases) {
    super(id);
    this.__room_id = room_id;
    this.__name = name;
    this.__value = value;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
    this.__assoc_room = new BelongsToAssociation<Room>(databases.getDatabase1().rooms(), room_id == null ? null : room_id.longValue());
  }

  public Accessory(long id, final Integer room_id, final String name, final String value, final Long created_at, final Long updated_at) {
    super(id);
    this.__room_id = room_id;
    this.__name = name;
    this.__value = value;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Accessory(long id, Map<Enum, Object> fieldsMap) {
    super(id);
    Integer room_id = (Integer) fieldsMap.get(Accessory._Fields.room_id);
    String name = (String) fieldsMap.get(Accessory._Fields.name);
    String value = (String) fieldsMap.get(Accessory._Fields.value);
    Long created_at = (Long) fieldsMap.get(Accessory._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Accessory._Fields.updated_at);
    this.__room_id = room_id;
    this.__name = name;
    this.__value = value;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Accessory (Accessory other) {
    super(other.getId());
    this.__room_id = other.getRoomId();
    this.__name = other.getName();
    this.__value = other.getValue();
    this.__created_at = other.getCreatedAt();
    this.__updated_at = other.getUpdatedAt();
  }

  public Integer getRoomId(){
    return __room_id;
  }

  public void setRoomId(Integer newval){
    this.__room_id = newval;
    cachedHashCode = 0;
  }

  public String getName(){
    return __name;
  }

  public void setName(String newval){
    this.__name = newval;
    cachedHashCode = 0;
  }

  public String getValue(){
    return __value;
  }

  public void setValue(String newval){
    this.__value = newval;
    cachedHashCode = 0;
  }

  public Long getCreatedAt(){
    return __created_at;
  }

  public void setCreatedAt(Long newval){
    this.__created_at = newval;
    cachedHashCode = 0;
  }

  public Long getUpdatedAt(){
    return __updated_at;
  }

  public void setUpdatedAt(Long newval){
    this.__updated_at = newval;
    cachedHashCode = 0;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case room_id:
        setRoomId((Integer) value);
        break;
      case name:
        setName((String) value);
        break;
      case value:
        setValue((String) value);
        break;
      case created_at:
        setCreatedAt((Long) value);
        break;
      case updated_at:
        setUpdatedAt((Long) value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case room_id:
        return Integer.class;
      case name:
        return String.class;
      case value:
        return String.class;
      case created_at:
        return Long.class;
      case updated_at:
        return Long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("room_id")) {
      return Integer.class;
    }
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("value")) {
      return String.class;
    }
    if (fieldName.equals("created_at")) {
      return Long.class;
    }
    if (fieldName.equals("updated_at")) {
      return Long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Room getRoom() throws IOException {
    return __assoc_room.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("room_id")) {
      return getRoomId();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("value")) {
      return getValue();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    if (fieldName.equals("updated_at")) {
      return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case room_id:
        return getRoomId();
      case name:
        return getName();
      case value:
        return getValue();
      case created_at:
        return getCreatedAt();
      case updated_at:
        return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case room_id:
        return null;
      case name:
        return null;
      case value:
        return null;
      case created_at:
        return null;
      case updated_at:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ModelWithId getCopy() {
    return new Accessory(this);
  }

  public String toString() {
    return "<Accessory"
      + " room_id: " + __room_id
      + " name: " + __name
      + " value: " + __value
      + " created_at: " + __created_at
      + " updated_at: " + __updated_at
      + ">";
  }
}
