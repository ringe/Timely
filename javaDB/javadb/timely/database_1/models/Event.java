
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.models;

import java.io.IOException;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import javadb.timely.database_1.IDatabase1;

import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;

import javadb.timely.IDatabases;

public class Event extends ModelWithId {
  // Fields
  private Integer __subject_id;
  private Integer __owner_id;
  private String __owner_type;
  private Boolean __is_private;
  private Integer __override_id;
  private Integer __parent_id;
  private Long __start;
  private Long __end;
  private String __name;
  private Long __created_at;
  private Long __updated_at;

  // Associations
  private BelongsToAssociation<Subject> __assoc_subject;

  public enum _Fields {
    subject_id,
    owner_id,
    owner_type,
    is_private,
    override_id,
    parent_id,
    start,
    end,
    name,
    created_at,
    updated_at,
  }

  public Event(long id, final Integer subject_id, final Integer owner_id, final String owner_type, final Boolean is_private, final Integer override_id, final Integer parent_id, final Long start, final Long end, final String name, final Long created_at, final Long updated_at, IDatabases databases) {
    super(id);
    this.__subject_id = subject_id;
    this.__owner_id = owner_id;
    this.__owner_type = owner_type;
    this.__is_private = is_private;
    this.__override_id = override_id;
    this.__parent_id = parent_id;
    this.__start = start;
    this.__end = end;
    this.__name = name;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
    this.__assoc_subject = new BelongsToAssociation<Subject>(databases.getDatabase1().subjects(), subject_id == null ? null : subject_id.longValue());
  }

  public Event(long id, final Integer subject_id, final Integer owner_id, final String owner_type, final Boolean is_private, final Integer override_id, final Integer parent_id, final Long start, final Long end, final String name, final Long created_at, final Long updated_at) {
    super(id);
    this.__subject_id = subject_id;
    this.__owner_id = owner_id;
    this.__owner_type = owner_type;
    this.__is_private = is_private;
    this.__override_id = override_id;
    this.__parent_id = parent_id;
    this.__start = start;
    this.__end = end;
    this.__name = name;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Event(long id, Map<Enum, Object> fieldsMap) {
    super(id);
    Integer subject_id = (Integer) fieldsMap.get(Event._Fields.subject_id);
    Integer owner_id = (Integer) fieldsMap.get(Event._Fields.owner_id);
    String owner_type = (String) fieldsMap.get(Event._Fields.owner_type);
    Boolean is_private = (Boolean) fieldsMap.get(Event._Fields.is_private);
    Integer override_id = (Integer) fieldsMap.get(Event._Fields.override_id);
    Integer parent_id = (Integer) fieldsMap.get(Event._Fields.parent_id);
    Long start = (Long) fieldsMap.get(Event._Fields.start);
    Long end = (Long) fieldsMap.get(Event._Fields.end);
    String name = (String) fieldsMap.get(Event._Fields.name);
    Long created_at = (Long) fieldsMap.get(Event._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Event._Fields.updated_at);
    this.__subject_id = subject_id;
    this.__owner_id = owner_id;
    this.__owner_type = owner_type;
    this.__is_private = is_private;
    this.__override_id = override_id;
    this.__parent_id = parent_id;
    this.__start = start;
    this.__end = end;
    this.__name = name;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Event (Event other) {
    super(other.getId());
    this.__subject_id = other.getSubjectId();
    this.__owner_id = other.getOwnerId();
    this.__owner_type = other.getOwnerType();
    this.__is_private = other.isIsPrivate();
    this.__override_id = other.getOverrideId();
    this.__parent_id = other.getParentId();
    this.__start = other.getStart();
    this.__end = other.getEnd();
    this.__name = other.getName();
    this.__created_at = other.getCreatedAt();
    this.__updated_at = other.getUpdatedAt();
  }

  public Integer getSubjectId(){
    return __subject_id;
  }

  public void setSubjectId(Integer newval){
    this.__subject_id = newval;
    cachedHashCode = 0;
  }

  public Integer getOwnerId(){
    return __owner_id;
  }

  public void setOwnerId(Integer newval){
    this.__owner_id = newval;
    cachedHashCode = 0;
  }

  public String getOwnerType(){
    return __owner_type;
  }

  public void setOwnerType(String newval){
    this.__owner_type = newval;
    cachedHashCode = 0;
  }

  public Boolean isIsPrivate(){
    return __is_private;
  }

  public void setIsPrivate(Boolean newval){
    this.__is_private = newval;
    cachedHashCode = 0;
  }

  public Integer getOverrideId(){
    return __override_id;
  }

  public void setOverrideId(Integer newval){
    this.__override_id = newval;
    cachedHashCode = 0;
  }

  public Integer getParentId(){
    return __parent_id;
  }

  public void setParentId(Integer newval){
    this.__parent_id = newval;
    cachedHashCode = 0;
  }

  public Long getStart(){
    return __start;
  }

  public void setStart(Long newval){
    this.__start = newval;
    cachedHashCode = 0;
  }

  public Long getEnd(){
    return __end;
  }

  public void setEnd(Long newval){
    this.__end = newval;
    cachedHashCode = 0;
  }

  public String getName(){
    return __name;
  }

  public void setName(String newval){
    this.__name = newval;
    cachedHashCode = 0;
  }

  public Long getCreatedAt(){
    return __created_at;
  }

  public void setCreatedAt(Long newval){
    this.__created_at = newval;
    cachedHashCode = 0;
  }

  public Long getUpdatedAt(){
    return __updated_at;
  }

  public void setUpdatedAt(Long newval){
    this.__updated_at = newval;
    cachedHashCode = 0;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case subject_id:
        setSubjectId((Integer) value);
        break;
      case owner_id:
        setOwnerId((Integer) value);
        break;
      case owner_type:
        setOwnerType((String) value);
        break;
      case is_private:
        setIsPrivate((Boolean) value);
        break;
      case override_id:
        setOverrideId((Integer) value);
        break;
      case parent_id:
        setParentId((Integer) value);
        break;
      case start:
        setStart((Long) value);
        break;
      case end:
        setEnd((Long) value);
        break;
      case name:
        setName((String) value);
        break;
      case created_at:
        setCreatedAt((Long) value);
        break;
      case updated_at:
        setUpdatedAt((Long) value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case subject_id:
        return Integer.class;
      case owner_id:
        return Integer.class;
      case owner_type:
        return String.class;
      case is_private:
        return Boolean.class;
      case override_id:
        return Integer.class;
      case parent_id:
        return Integer.class;
      case start:
        return Long.class;
      case end:
        return Long.class;
      case name:
        return String.class;
      case created_at:
        return Long.class;
      case updated_at:
        return Long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("subject_id")) {
      return Integer.class;
    }
    if (fieldName.equals("owner_id")) {
      return Integer.class;
    }
    if (fieldName.equals("owner_type")) {
      return String.class;
    }
    if (fieldName.equals("is_private")) {
      return Boolean.class;
    }
    if (fieldName.equals("override_id")) {
      return Integer.class;
    }
    if (fieldName.equals("parent_id")) {
      return Integer.class;
    }
    if (fieldName.equals("start")) {
      return Long.class;
    }
    if (fieldName.equals("end")) {
      return Long.class;
    }
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("created_at")) {
      return Long.class;
    }
    if (fieldName.equals("updated_at")) {
      return Long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Subject getSubject() throws IOException {
    return __assoc_subject.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("subject_id")) {
      return getSubjectId();
    }
    if (fieldName.equals("owner_id")) {
      return getOwnerId();
    }
    if (fieldName.equals("owner_type")) {
      return getOwnerType();
    }
    if (fieldName.equals("is_private")) {
      return isIsPrivate();
    }
    if (fieldName.equals("override_id")) {
      return getOverrideId();
    }
    if (fieldName.equals("parent_id")) {
      return getParentId();
    }
    if (fieldName.equals("start")) {
      return getStart();
    }
    if (fieldName.equals("end")) {
      return getEnd();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    if (fieldName.equals("updated_at")) {
      return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case subject_id:
        return getSubjectId();
      case owner_id:
        return getOwnerId();
      case owner_type:
        return getOwnerType();
      case is_private:
        return isIsPrivate();
      case override_id:
        return getOverrideId();
      case parent_id:
        return getParentId();
      case start:
        return getStart();
      case end:
        return getEnd();
      case name:
        return getName();
      case created_at:
        return getCreatedAt();
      case updated_at:
        return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case subject_id:
        return null;
      case owner_id:
        return null;
      case owner_type:
        return null;
      case is_private:
        return null;
      case override_id:
        return null;
      case parent_id:
        return null;
      case start:
        return null;
      case end:
        return null;
      case name:
        return null;
      case created_at:
        return null;
      case updated_at:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ModelWithId getCopy() {
    return new Event(this);
  }

  public String toString() {
    return "<Event"
      + " subject_id: " + __subject_id
      + " owner_id: " + __owner_id
      + " owner_type: " + __owner_type
      + " is_private: " + __is_private
      + " override_id: " + __override_id
      + " parent_id: " + __parent_id
      + " start: " + __start
      + " end: " + __end
      + " name: " + __name
      + " created_at: " + __created_at
      + " updated_at: " + __updated_at
      + ">";
  }
}
