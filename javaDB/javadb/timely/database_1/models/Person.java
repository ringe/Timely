
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20111112181520 */
package javadb.timely.database_1.models;

import java.io.IOException;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import javadb.timely.database_1.IDatabase1;

import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;

import javadb.timely.IDatabases;

public class Person extends ModelWithId {
  // Fields
  private String __remember_token;
  private Long __remember_created_at;
  private Integer __sign_in_count;
  private Long __current_sign_in_at;
  private Long __last_sign_in_at;
  private String __current_sign_in_ip;
  private String __last_sign_in_ip;
  private String __authentication_token;
  private String __email;
  private String __private_email;
  private String __phone;
  private String __firstname;
  private String __lastname;
  private String __type;
  private Long __created_at;
  private Long __updated_at;

  // Associations
  private HasManyAssociation<Event> __assoc_events;
  private HasManyAssociation<UserSetting> __assoc_user_settings;

  public enum _Fields {
    remember_token,
    remember_created_at,
    sign_in_count,
    current_sign_in_at,
    last_sign_in_at,
    current_sign_in_ip,
    last_sign_in_ip,
    authentication_token,
    email,
    private_email,
    phone,
    firstname,
    lastname,
    type,
    created_at,
    updated_at,
  }

  public Person(long id, final String remember_token, final Long remember_created_at, final Integer sign_in_count, final Long current_sign_in_at, final Long last_sign_in_at, final String current_sign_in_ip, final String last_sign_in_ip, final String authentication_token, final String email, final String private_email, final String phone, final String firstname, final String lastname, final String type, final Long created_at, final Long updated_at, IDatabases databases) {
    super(id);
    this.__remember_token = remember_token;
    this.__remember_created_at = remember_created_at;
    this.__sign_in_count = sign_in_count;
    this.__current_sign_in_at = current_sign_in_at;
    this.__last_sign_in_at = last_sign_in_at;
    this.__current_sign_in_ip = current_sign_in_ip;
    this.__last_sign_in_ip = last_sign_in_ip;
    this.__authentication_token = authentication_token;
    this.__email = email;
    this.__private_email = private_email;
    this.__phone = phone;
    this.__firstname = firstname;
    this.__lastname = lastname;
    this.__type = type;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
    this.__assoc_events = new HasManyAssociation<Event>(databases.getDatabase1().events(), "person_id", id);
    this.__assoc_user_settings = new HasManyAssociation<UserSetting>(databases.getDatabase1().userSettings(), "person_id", id);
  }

  public Person(long id, final String remember_token, final Long remember_created_at, final Integer sign_in_count, final Long current_sign_in_at, final Long last_sign_in_at, final String current_sign_in_ip, final String last_sign_in_ip, final String authentication_token, final String email, final String private_email, final String phone, final String firstname, final String lastname, final String type, final Long created_at, final Long updated_at) {
    super(id);
    this.__remember_token = remember_token;
    this.__remember_created_at = remember_created_at;
    this.__sign_in_count = sign_in_count;
    this.__current_sign_in_at = current_sign_in_at;
    this.__last_sign_in_at = last_sign_in_at;
    this.__current_sign_in_ip = current_sign_in_ip;
    this.__last_sign_in_ip = last_sign_in_ip;
    this.__authentication_token = authentication_token;
    this.__email = email;
    this.__private_email = private_email;
    this.__phone = phone;
    this.__firstname = firstname;
    this.__lastname = lastname;
    this.__type = type;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Person(long id, Map<Enum, Object> fieldsMap) {
    super(id);
    String remember_token = (String) fieldsMap.get(Person._Fields.remember_token);
    Long remember_created_at = (Long) fieldsMap.get(Person._Fields.remember_created_at);
    Integer sign_in_count_tmp = (Integer) fieldsMap.get(Person._Fields.sign_in_count);
    Integer sign_in_count = sign_in_count_tmp == null ? 0 : sign_in_count_tmp;
    Long current_sign_in_at = (Long) fieldsMap.get(Person._Fields.current_sign_in_at);
    Long last_sign_in_at = (Long) fieldsMap.get(Person._Fields.last_sign_in_at);
    String current_sign_in_ip = (String) fieldsMap.get(Person._Fields.current_sign_in_ip);
    String last_sign_in_ip = (String) fieldsMap.get(Person._Fields.last_sign_in_ip);
    String authentication_token = (String) fieldsMap.get(Person._Fields.authentication_token);
    String email = (String) fieldsMap.get(Person._Fields.email);
    String private_email = (String) fieldsMap.get(Person._Fields.private_email);
    String phone = (String) fieldsMap.get(Person._Fields.phone);
    String firstname = (String) fieldsMap.get(Person._Fields.firstname);
    String lastname = (String) fieldsMap.get(Person._Fields.lastname);
    String type = (String) fieldsMap.get(Person._Fields.type);
    Long created_at = (Long) fieldsMap.get(Person._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(Person._Fields.updated_at);
    this.__remember_token = remember_token;
    this.__remember_created_at = remember_created_at;
    this.__sign_in_count = sign_in_count;
    this.__current_sign_in_at = current_sign_in_at;
    this.__last_sign_in_at = last_sign_in_at;
    this.__current_sign_in_ip = current_sign_in_ip;
    this.__last_sign_in_ip = last_sign_in_ip;
    this.__authentication_token = authentication_token;
    this.__email = email;
    this.__private_email = private_email;
    this.__phone = phone;
    this.__firstname = firstname;
    this.__lastname = lastname;
    this.__type = type;
    this.__created_at = created_at;
    this.__updated_at = updated_at;
  }

  public Person (Person other) {
    super(other.getId());
    this.__remember_token = other.getRememberToken();
    this.__remember_created_at = other.getRememberCreatedAt();
    this.__sign_in_count = other.getSignInCount();
    this.__current_sign_in_at = other.getCurrentSignInAt();
    this.__last_sign_in_at = other.getLastSignInAt();
    this.__current_sign_in_ip = other.getCurrentSignInIp();
    this.__last_sign_in_ip = other.getLastSignInIp();
    this.__authentication_token = other.getAuthenticationToken();
    this.__email = other.getEmail();
    this.__private_email = other.getPrivateEmail();
    this.__phone = other.getPhone();
    this.__firstname = other.getFirstname();
    this.__lastname = other.getLastname();
    this.__type = other.getType();
    this.__created_at = other.getCreatedAt();
    this.__updated_at = other.getUpdatedAt();
  }

  public String getRememberToken(){
    return __remember_token;
  }

  public void setRememberToken(String newval){
    this.__remember_token = newval;
    cachedHashCode = 0;
  }

  public Long getRememberCreatedAt(){
    return __remember_created_at;
  }

  public void setRememberCreatedAt(Long newval){
    this.__remember_created_at = newval;
    cachedHashCode = 0;
  }

  public Integer getSignInCount(){
    return __sign_in_count;
  }

  public void setSignInCount(Integer newval){
    this.__sign_in_count = newval;
    cachedHashCode = 0;
  }

  public Long getCurrentSignInAt(){
    return __current_sign_in_at;
  }

  public void setCurrentSignInAt(Long newval){
    this.__current_sign_in_at = newval;
    cachedHashCode = 0;
  }

  public Long getLastSignInAt(){
    return __last_sign_in_at;
  }

  public void setLastSignInAt(Long newval){
    this.__last_sign_in_at = newval;
    cachedHashCode = 0;
  }

  public String getCurrentSignInIp(){
    return __current_sign_in_ip;
  }

  public void setCurrentSignInIp(String newval){
    this.__current_sign_in_ip = newval;
    cachedHashCode = 0;
  }

  public String getLastSignInIp(){
    return __last_sign_in_ip;
  }

  public void setLastSignInIp(String newval){
    this.__last_sign_in_ip = newval;
    cachedHashCode = 0;
  }

  public String getAuthenticationToken(){
    return __authentication_token;
  }

  public void setAuthenticationToken(String newval){
    this.__authentication_token = newval;
    cachedHashCode = 0;
  }

  public String getEmail(){
    return __email;
  }

  public void setEmail(String newval){
    this.__email = newval;
    cachedHashCode = 0;
  }

  public String getPrivateEmail(){
    return __private_email;
  }

  public void setPrivateEmail(String newval){
    this.__private_email = newval;
    cachedHashCode = 0;
  }

  public String getPhone(){
    return __phone;
  }

  public void setPhone(String newval){
    this.__phone = newval;
    cachedHashCode = 0;
  }

  public String getFirstname(){
    return __firstname;
  }

  public void setFirstname(String newval){
    this.__firstname = newval;
    cachedHashCode = 0;
  }

  public String getLastname(){
    return __lastname;
  }

  public void setLastname(String newval){
    this.__lastname = newval;
    cachedHashCode = 0;
  }

  public String getType(){
    return __type;
  }

  public void setType(String newval){
    this.__type = newval;
    cachedHashCode = 0;
  }

  public Long getCreatedAt(){
    return __created_at;
  }

  public void setCreatedAt(Long newval){
    this.__created_at = newval;
    cachedHashCode = 0;
  }

  public Long getUpdatedAt(){
    return __updated_at;
  }

  public void setUpdatedAt(Long newval){
    this.__updated_at = newval;
    cachedHashCode = 0;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case remember_token:
        setRememberToken((String) value);
        break;
      case remember_created_at:
        setRememberCreatedAt((Long) value);
        break;
      case sign_in_count:
        setSignInCount((Integer) value);
        break;
      case current_sign_in_at:
        setCurrentSignInAt((Long) value);
        break;
      case last_sign_in_at:
        setLastSignInAt((Long) value);
        break;
      case current_sign_in_ip:
        setCurrentSignInIp((String) value);
        break;
      case last_sign_in_ip:
        setLastSignInIp((String) value);
        break;
      case authentication_token:
        setAuthenticationToken((String) value);
        break;
      case email:
        setEmail((String) value);
        break;
      case private_email:
        setPrivateEmail((String) value);
        break;
      case phone:
        setPhone((String) value);
        break;
      case firstname:
        setFirstname((String) value);
        break;
      case lastname:
        setLastname((String) value);
        break;
      case type:
        setType((String) value);
        break;
      case created_at:
        setCreatedAt((Long) value);
        break;
      case updated_at:
        setUpdatedAt((Long) value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case remember_token:
        return String.class;
      case remember_created_at:
        return Long.class;
      case sign_in_count:
        return Integer.class;
      case current_sign_in_at:
        return Long.class;
      case last_sign_in_at:
        return Long.class;
      case current_sign_in_ip:
        return String.class;
      case last_sign_in_ip:
        return String.class;
      case authentication_token:
        return String.class;
      case email:
        return String.class;
      case private_email:
        return String.class;
      case phone:
        return String.class;
      case firstname:
        return String.class;
      case lastname:
        return String.class;
      case type:
        return String.class;
      case created_at:
        return Long.class;
      case updated_at:
        return Long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("remember_token")) {
      return String.class;
    }
    if (fieldName.equals("remember_created_at")) {
      return Long.class;
    }
    if (fieldName.equals("sign_in_count")) {
      return Integer.class;
    }
    if (fieldName.equals("current_sign_in_at")) {
      return Long.class;
    }
    if (fieldName.equals("last_sign_in_at")) {
      return Long.class;
    }
    if (fieldName.equals("current_sign_in_ip")) {
      return String.class;
    }
    if (fieldName.equals("last_sign_in_ip")) {
      return String.class;
    }
    if (fieldName.equals("authentication_token")) {
      return String.class;
    }
    if (fieldName.equals("email")) {
      return String.class;
    }
    if (fieldName.equals("private_email")) {
      return String.class;
    }
    if (fieldName.equals("phone")) {
      return String.class;
    }
    if (fieldName.equals("firstname")) {
      return String.class;
    }
    if (fieldName.equals("lastname")) {
      return String.class;
    }
    if (fieldName.equals("type")) {
      return String.class;
    }
    if (fieldName.equals("created_at")) {
      return Long.class;
    }
    if (fieldName.equals("updated_at")) {
      return Long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Set<Event> getEvents() throws IOException {
    return __assoc_events.get();
  }

  public Set<UserSetting> getUserSettings() throws IOException {
    return __assoc_user_settings.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("remember_token")) {
      return getRememberToken();
    }
    if (fieldName.equals("remember_created_at")) {
      return getRememberCreatedAt();
    }
    if (fieldName.equals("sign_in_count")) {
      return getSignInCount();
    }
    if (fieldName.equals("current_sign_in_at")) {
      return getCurrentSignInAt();
    }
    if (fieldName.equals("last_sign_in_at")) {
      return getLastSignInAt();
    }
    if (fieldName.equals("current_sign_in_ip")) {
      return getCurrentSignInIp();
    }
    if (fieldName.equals("last_sign_in_ip")) {
      return getLastSignInIp();
    }
    if (fieldName.equals("authentication_token")) {
      return getAuthenticationToken();
    }
    if (fieldName.equals("email")) {
      return getEmail();
    }
    if (fieldName.equals("private_email")) {
      return getPrivateEmail();
    }
    if (fieldName.equals("phone")) {
      return getPhone();
    }
    if (fieldName.equals("firstname")) {
      return getFirstname();
    }
    if (fieldName.equals("lastname")) {
      return getLastname();
    }
    if (fieldName.equals("type")) {
      return getType();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    if (fieldName.equals("updated_at")) {
      return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case remember_token:
        return getRememberToken();
      case remember_created_at:
        return getRememberCreatedAt();
      case sign_in_count:
        return getSignInCount();
      case current_sign_in_at:
        return getCurrentSignInAt();
      case last_sign_in_at:
        return getLastSignInAt();
      case current_sign_in_ip:
        return getCurrentSignInIp();
      case last_sign_in_ip:
        return getLastSignInIp();
      case authentication_token:
        return getAuthenticationToken();
      case email:
        return getEmail();
      case private_email:
        return getPrivateEmail();
      case phone:
        return getPhone();
      case firstname:
        return getFirstname();
      case lastname:
        return getLastname();
      case type:
        return getType();
      case created_at:
        return getCreatedAt();
      case updated_at:
        return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case remember_token:
        return null;
      case remember_created_at:
        return null;
      case sign_in_count:
        return 0;
      case current_sign_in_at:
        return null;
      case last_sign_in_at:
        return null;
      case current_sign_in_ip:
        return null;
      case last_sign_in_ip:
        return null;
      case authentication_token:
        return null;
      case email:
        return null;
      case private_email:
        return null;
      case phone:
        return null;
      case firstname:
        return null;
      case lastname:
        return null;
      case type:
        return null;
      case created_at:
        return null;
      case updated_at:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ModelWithId getCopy() {
    return new Person(this);
  }

  public String toString() {
    return "<Person"
      + " remember_token: " + __remember_token
      + " remember_created_at: " + __remember_created_at
      + " sign_in_count: " + __sign_in_count
      + " current_sign_in_at: " + __current_sign_in_at
      + " last_sign_in_at: " + __last_sign_in_at
      + " current_sign_in_ip: " + __current_sign_in_ip
      + " last_sign_in_ip: " + __last_sign_in_ip
      + " authentication_token: " + __authentication_token
      + " email: " + __email
      + " private_email: " + __private_email
      + " phone: " + __phone
      + " firstname: " + __firstname
      + " lastname: " + __lastname
      + " type: " + __type
      + " created_at: " + __created_at
      + " updated_at: " + __updated_at
      + ">";
  }
}
